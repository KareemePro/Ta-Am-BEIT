// <auto-generated />
using System;
using FoodDelivery.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodDelivery.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20240220210717_AddingMealStyle")]
    partial class AddingMealStyle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Address.Building", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StreetID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("StreetID");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Address.District", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GovernorateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GovernorateID");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Address.Governorate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Governorates");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Address.Street", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DistrictID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DistrictID");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Cart", b =>
                {
                    b.Property<string>("CustomerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("MealOptionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CustomerID", "MealOptionID");

                    b.HasIndex("MealOptionID");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.ChiefReview", b =>
                {
                    b.Property<string>("ChiefID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChiefID", "CustomerID");

                    b.HasIndex("ChiefID")
                        .IsUnique();

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.ToTable("ChiefReview");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.CustomerPromoCode", b =>
                {
                    b.Property<string>("PromoCodeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsedByOrder")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UsedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PromoCodeID", "CustomerID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerPromoCode");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Meal", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChiefID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSideDish")
                        .HasColumnType("bit");

                    b.Property<int>("MealCategory")
                        .HasColumnType("int");

                    b.Property<int>("MealSpiceLevel")
                        .HasColumnType("int");

                    b.Property<int>("MealStyle")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ChiefID");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.MealOption", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("DailyQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MealID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MealSizeOption")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasAlternateKey("MealSizeOption", "MealID");

                    b.HasIndex("MealID");

                    b.ToTable("MealOptions");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.MealReview", b =>
                {
                    b.Property<Guid>("MealID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MealID", "CustomerID");

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.ToTable("MealReviews");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.MealTag", b =>
                {
                    b.Property<Guid>("TagID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MealID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagID", "MealID");

                    b.HasIndex("MealID");

                    b.ToTable("MealTag");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Orders.Order", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PromoCodeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("BuildingID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PromoCodeID", "CustomerID")
                        .IsUnique()
                        .HasFilter("[PromoCodeID] IS NOT NULL");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Orders.OrderItem", b =>
                {
                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MealOptionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderID", "MealOptionID");

                    b.HasIndex("MealOptionID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.PromoCode", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("MaxDiscount")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("PromoCode");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Subscriptions.Subscription", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("From")
                        .HasColumnType("datetime2");

                    b.Property<string>("PromoCodeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SubscriptionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PromoCodeID", "CustomerID")
                        .IsUnique()
                        .HasFilter("[PromoCodeID] IS NOT NULL");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Subscriptions.SubscriptionDayData", b =>
                {
                    b.Property<Guid>("SubscriptionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MealOptionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionID", "MealOptionID", "DeliveryDate");

                    b.HasIndex("MealOptionID");

                    b.ToTable("SubscriptionsDaysData");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Tag", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("BuildingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("IsRefreshTokenRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Chief", b =>
                {
                    b.HasBaseType("FoodDelivery.Models.DominModels.User");

                    b.Property<TimeOnly?>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GovernmentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<TimeOnly?>("OpeningTime")
                        .HasColumnType("time");

                    b.ToTable("Chiefs", (string)null);
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Customer", b =>
                {
                    b.HasBaseType("FoodDelivery.Models.DominModels.User");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Address.Building", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.Address.Street", "Street")
                        .WithMany("Buildings")
                        .HasForeignKey("StreetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Street");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Address.District", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.Address.Governorate", "Governorate")
                        .WithMany("Districts")
                        .HasForeignKey("GovernorateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Address.Street", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.Address.District", "District")
                        .WithMany("Streets")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Cart", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Models.DominModels.MealOption", "MealOption")
                        .WithMany()
                        .HasForeignKey("MealOptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MealOption");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.ChiefReview", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.Chief", "Chief")
                        .WithOne("ChiefReview")
                        .HasForeignKey("FoodDelivery.Models.DominModels.ChiefReview", "ChiefID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Models.DominModels.Customer", "Customer")
                        .WithOne("ChiefReview")
                        .HasForeignKey("FoodDelivery.Models.DominModels.ChiefReview", "CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chief");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.CustomerPromoCode", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.Customer", "Customer")
                        .WithMany("CustomerPromoCodes")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Models.DominModels.PromoCode", "PromoCode")
                        .WithMany("CustomersPromoCodes")
                        .HasForeignKey("PromoCodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PromoCode");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Meal", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.Chief", "Chief")
                        .WithMany("Meals")
                        .HasForeignKey("ChiefID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chief");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.MealOption", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.Meal", "Meal")
                        .WithMany("MealOptions")
                        .HasForeignKey("MealID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.MealReview", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.Customer", "Customer")
                        .WithOne("MealReview")
                        .HasForeignKey("FoodDelivery.Models.DominModels.MealReview", "CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Models.DominModels.Meal", "Meal")
                        .WithMany("MealReviews")
                        .HasForeignKey("MealID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.MealTag", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.Meal", "Meal")
                        .WithMany("MealTags")
                        .HasForeignKey("MealID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Models.DominModels.Tag", "Tag")
                        .WithMany("MealTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Orders.Order", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.Address.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Models.DominModels.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Models.DominModels.CustomerPromoCode", "CustomerPromoCode")
                        .WithOne("Order")
                        .HasForeignKey("FoodDelivery.Models.DominModels.Orders.Order", "PromoCodeID", "CustomerID");

                    b.Navigation("Building");

                    b.Navigation("Customer");

                    b.Navigation("CustomerPromoCode");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Orders.OrderItem", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.MealOption", "MealOption")
                        .WithMany("OrderItems")
                        .HasForeignKey("MealOptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Models.DominModels.Orders.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealOption");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Subscriptions.Subscription", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Models.DominModels.CustomerPromoCode", "CustomerPromoCode")
                        .WithOne("Subscription")
                        .HasForeignKey("FoodDelivery.Models.DominModels.Subscriptions.Subscription", "PromoCodeID", "CustomerID");

                    b.Navigation("Customer");

                    b.Navigation("CustomerPromoCode");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Subscriptions.SubscriptionDayData", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.MealOption", "MealOption")
                        .WithMany("SubscriptionsDaysData")
                        .HasForeignKey("MealOptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Models.DominModels.Subscriptions.Subscription", "Subscription")
                        .WithMany("SubscriptionDayData")
                        .HasForeignKey("SubscriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealOption");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.User", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.Address.Building", "Building")
                        .WithMany("Users")
                        .HasForeignKey("BuildingID");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Models.DominModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Chief", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.User", null)
                        .WithOne()
                        .HasForeignKey("FoodDelivery.Models.DominModels.Chief", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Customer", b =>
                {
                    b.HasOne("FoodDelivery.Models.DominModels.User", null)
                        .WithOne()
                        .HasForeignKey("FoodDelivery.Models.DominModels.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Address.Building", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Address.District", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Address.Governorate", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Address.Street", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.CustomerPromoCode", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();

                    b.Navigation("Subscription")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Meal", b =>
                {
                    b.Navigation("MealOptions");

                    b.Navigation("MealReviews");

                    b.Navigation("MealTags");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.MealOption", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("SubscriptionsDaysData");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Orders.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.PromoCode", b =>
                {
                    b.Navigation("CustomersPromoCodes");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Subscriptions.Subscription", b =>
                {
                    b.Navigation("SubscriptionDayData");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Tag", b =>
                {
                    b.Navigation("MealTags");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Chief", b =>
                {
                    b.Navigation("ChiefReview")
                        .IsRequired();

                    b.Navigation("Meals");
                });

            modelBuilder.Entity("FoodDelivery.Models.DominModels.Customer", b =>
                {
                    b.Navigation("ChiefReview")
                        .IsRequired();

                    b.Navigation("CustomerPromoCodes");

                    b.Navigation("MealReview")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
